name: Release

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - v[0-9]+.*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create GitHub release
    # only publish from the origin repository
    if: github.repository_owner == 'victorshevtsov'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - uses: taiki-e/create-gh-release-action@v1
        with:
          branch: master
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    name: "Upload release assets"
    needs: create-release
    strategy:
      matrix:
        target: [aarch64-unknown-linux-gnu, x86_64-unknown-linux-gnu]
        # include:
        #   - target: aarch64-unknown-linux-gnu
        #     # os: ubuntu-latest
        #   # - target: aarch64-apple-darwin
        #   #   os: macos-latest
        #   - target: x86_64-unknown-linux-gnu
        #     # os: ubuntu-latest
        #   # - target: x86_64-apple-darwin
        #   #   os: macos-latest
    runs-on: ubuntu-latest
    # runs-on: ${{ matrix.os }}
    steps:
      - name: Install prerequisites
        run: |
          sudo apt update && sudo apt install pkg-config libzmq-dev

      # - name: Install prerequisites
      #   run: |
      #     sudo apt update && sudo apt install -y pkg-config libssl-dev openssl

      - name: Check out the repository
        uses: actions/checkout@v4

      # - name: Build binary
      #   uses: houseabsolute/actions-rust-cross@v0
      #   with:
      #     target: ${{ matrix.target }}
      #     args: "--locked --release"
      #     strip: true

      - uses: taiki-e/upload-rust-binary-action@v1
        id: build-binary
        with:
          target: ${{ matrix.target }}
          bin: try-actions
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: ./target/${{ matrix.target }}/release/try-actions

  create-docker-image:
    name: "Create Docker image"
    needs: upload-assets
    runs-on: ubuntu-latest
    steps:
      - name: Download release binaries(aarch64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: binary-aarch64-unknown-linux-gnu
          path: binary-arm64

      - name: Download release binaries(x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: binary-x86_64-unknown-linux-gnu
          path: binary-amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - uses: 1arp/create-a-file-action@0.4.5
        with:
          file: "Dockerfile"
          content: |
            FROM debian:bookworm-slim
            ARG TARGETARCH

            RUN \
              apt update && \
              apt install -y openssl && \
              rm -rf /var/lib/apt/lists/*

            COPY --chmod=555 ./binary-$TARGETARCH/try-actions /usr/local/bin/try-actions
            CMD ["try-actions"]

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
