name: Build

on:
  push:
    branches: ["master", "dev"]
  pull_request:
    branches: ["master", "dev"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-14
          - target: aarch64-unknown-linux-gnu
            os: self-hosted
          # - target: x86_64-apple-darwin
          #   os: macos-14-large

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # - name: Install libzmq3-dev
      #   run: sudo apt install -y libzmq3-dev:arm64

      # - name: Add toolchain
      #   run: rustup toolchain install stable-${{ matrix.target }}

      # - name: Set toolchain
      #   run: rustup default stable-${{ matrix.target }}

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Rustup
        run: rustup show

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Run binary
        run: ./target/${{ matrix.target }}/release/try-actions

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: try-actions-${{ matrix.target }}
          path: ./target/${{ matrix.target }}/release/try-actions
  create-docker-image:
    name: "Create Docker image"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download release binaries(aarch64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: try-actions-aarch64-unknown-linux-gnu
          path: binary-arm64

      - name: Download release binaries(x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v4
        with:
          name: try-actions-x86_64-unknown-linux-gnu
          path: binary-amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - uses: 1arp/create-a-file-action@0.4.5
        with:
          file: "Dockerfile"
          content: |
            FROM debian:bookworm-slim
            ARG TARGETARCH

            RUN \
              apt update && \
              apt install -y openssl && \
              rm -rf /var/lib/apt/lists/*

            COPY --chmod=555 ./binary-$TARGETARCH/try-actions /usr/local/bin/try-actions
            CMD ["try-actions"]

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
